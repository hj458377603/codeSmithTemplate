<%-- 
Name:	IBatisNetGen.DaoImpl.cst
Version: 2007.02.08
Author: Yaojian  ( smrtk@hotmail.com )
Description: Generates the data access interface for IBatis.Net (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="CSBatisBuilder.cs" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Globalization" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption() {
		return FileSetOption.CreateDefaultBatisMapOption();
	}
</script>
<?xml version="1.0" encoding="utf-8" ?>
<!--
/***************************************************************************************************************
 * 
 * 2012-2013 苏宁资产管理系统 版权所有  
 * 
 * 文件名：           <% =this.FileName %>
 * 
 * 描述：             
 * 
 * 作者：             徐静(13060319)
 * 
 * 版本：             1.0
 * 
 * 最后更新：         徐静(13060319)
 * 
 * 创建时间：         <%=DateTime.Now.ToString("yyyy/M/d HH:mm:ss tt", new CultureInfo("en-US"))%>
 * 
 * 最后更新时间：     <%=DateTime.Now.ToString("yyyy/M/d HH:mm:ss tt", new CultureInfo("en-US"))%>
 * 
 *****************************************************************************************************************/
-->
<%--<!--============================================================================
//	CAUTION: This file is generated by <% =CodeTemplateInfo.FileName %> at <% =CodeTemplateInfo.DateCreated %>
//				Any manual editing will be lost in re-generation.
//===========================================================================-->--%>
<sqlMap namespace="<% =Builder.EntityName %>"
	xmlns="http://ibatis.apache.org/mapping" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<alias>
		<typeAlias alias="<% =Builder.EntityName %>" type="<% =Builder.EntityQualifiedName %>" />
	</alias>

	<resultMaps>
		<resultMap id="<% =Builder.FullResultMapId %>" class="<% =Builder.EntityName%>">
			<% foreach (ColumnInfo c in Builder.Columns) { %>
			<result property="<% =c.PropName %>" column="<% =c.ResultColumnName %>" dbType="<% =c.ProviderDbTypeName %>"/>
			<% } %>
		</resultMap>
		<% if (Builder.HasLob) { %>
		<resultMap id="<% =Builder.NonLobResultMapId %>" class="<% =Builder.EntityName%>">
			<% foreach (ColumnInfo c in Builder.NonLobColumns) { %>
			<result property="<% =c.PropName %>" column="<% =c.ResultColumnName %>" dbType="<% =c.ProviderDbTypeName %>"/>
			<% } %>
		</resultMap>
		<% } %>
	</resultMaps>
	
	<statements>

		<select id="<% =Builder.GetCountStmtId %>" resultClass="System.Int32">
			SELECT count(*) FROM <% =Builder.QualifiedTableName %>
		</select>
		
		<select id="<% =Builder.SelectAllStmtId %>" resultMap="<% =Builder.FullResultMapId %>">
			SELECT * 
			FROM <% =Builder.QualifiedTableName %>
		</select>
		<% if (Builder.HasLob) { %>
		<select id="<% =Builder.SelectNonLobAllStmtId %>" resultMap="<% =Builder.NonLobResultMapId %>">
			SELECT
<%				for (int i = 0; i < Builder.NonLobColumns.Count; i ++) {
					ColumnInfo c = Builder.NonLobColumns[i];%>
				<% 	if (i > 0) { %>, <% } %><% 	=c.SqlQualifiedColumnName %>
<% 				} %>
			FROM <% =Builder.QualifiedTableName %>
		</select>
		<% } %>
		
		<select id="<% =Builder.SelectStmtId %>" parameterClass="<% =Builder.EntityName %>" resultMap="<% =Builder.FullResultMapId %>" extends="<% =Builder.SelectAllStmtId %>">
			WHERE
				<% 	for (int i = 0; i < Builder.PkColumns.Count; i++) { 
						ColumnInfo c = Builder.PkColumns[i]; %>
				<% 		if (i > 0) { %>AND <% } %>(<% =c.SqlQualifiedColumnName %> = #<% =c.SqlInlineParameterMap %>#)
				<% 	} %>
		</select>
		<%	if (Builder.HasLob && Builder.DaoMethodSetOption.SelectNonLobOption.GenerateImpl) { %>
		<select id="<% =Builder.SelectNonLobStmtId %>" parameterClass="<% =Builder.EntityName %>" resultMap="<% =Builder.NonLobResultMapId %>" extends="<% =Builder.SelectNonLobAllStmtId %>">
			WHERE
				<% 	for (int i = 0; i < Builder.PkColumns.Count; i++) { 
						ColumnInfo c = Builder.PkColumns[i]; %>
				<% 		if (i > 0) { %>AND <% } %>(<% =c.SqlQualifiedColumnName %> = #<% =c.SqlInlineParameterMap %>#)
				<% 	} %>
		</select>
		<%	} %>
		
		<%	if (Builder.DaoMethodSetOption.SelectByOption.GenerateImpl) { %>
		<% 		foreach (ColumnInfo c in Builder.FinderColumns ) { %>
		<select id="<% =Builder.SelectByStmtId(c) %>" parameterClass="<% =c.SqlParameterClass %>" resultMap="<% =Builder.FullResultMapId %>" extends="<% =Builder.SelectAllStmtId %>">
			WHERE (<% =c.SqlQualifiedColumnName %> = #value#)
		</select>
		<% if (Builder.HasLob) { %>
		<select id="<% =Builder.SelectNonLobByStmtId(c) %>" parameterClass="<% =c.SqlParameterClass %>" resultMap="<% =Builder.NonLobResultMapId %>" extends="<% =Builder.SelectNonLobAllStmtId %>">
			WHERE (<% =c.SqlQualifiedColumnName %> = #value#)
		</select>
		<% } %>
		<% 		} //end for %>
		<% 	} //end if%>
		
		<insert id="<% =Builder.InsertStmtId %>" parameterClass="<% =Builder.EntityName %>">
			INSERT INTO <% =Builder.QualifiedTableName %> (
				<% 	for (int i = 0; i < Builder.Columns.Count; i++) { 
						ColumnInfo c = Builder.Columns[i]; %>
				<% 		if (i > 0) { %>,<% } %> <% =c.SqlColumnName %>
				<% 	} %>
			) VALUES (
				<% 	for (int i = 0; i < Builder.Columns.Count; i++) {
						ColumnInfo c = Builder.Columns[i];		%>
				<% 		if (i > 0) { %>,<% } %> #<% =c.SqlInlineParameterMap %>#
				<% 	} %>
			)
		</insert>

		<update id="<% =Builder.UpdateStmtId %>" parameterClass="<% =Builder.EntityName %>">
			UPDATE <% =Builder.QualifiedTableName %> SET
				<% 	for (int i = 0; i < Builder.NonPkColumns.Count; i++) {
						ColumnInfo c = Builder.NonPkColumns[i]; 	%>
				<% 		if (i > 0) { %>,<% } %> <% =c.SqlColumnName %> = #<% =c.SqlInlineParameterMap %>#
				<% 	} %>
			WHERE
				<% 	for (int i = 0; i < Builder.PkColumns.Count; i++) {
						ColumnInfo c = Builder.PkColumns[i];	%>
				<% 		if (i > 0) { %>AND <% } %>(<% =c.SqlColumnName %> = #<% =c.SqlInlineParameterMap %>#)
				<% 	} %>
		</update>

		<delete id="<% =Builder.DeleteStmtId %>" parameterClass="<% =Builder.EntityName %>">
			DELETE FROM <% =Builder.QualifiedTableName %>
			WHERE
				<%	for (int i = 0; i < Builder.PkColumns.Count; i++) {
						ColumnInfo c = Builder.PkColumns[i];	%>
				<%		if (i > 0) { %>AND <% } %>(<% =c.SqlColumnName %> = #<% =c.SqlInlineParameterMap %>#)
				<%	} %>
		</delete>

		<%	if (Builder.DaoMethodSetOption.DeleteByOption.GenerateImpl) { %>
		<% 		foreach (ColumnInfo c in Builder.FinderColumns ) { %>
		<delete id="<% =Builder.DeleteByStmtId(c) %>" parameterClass="<% =c.SqlParameterClass %>">
			DELETE FROM <% =Builder.QualifiedTableName %> WHERE (<% =c.SqlColumnName %> = #value#)
		</delete>
		<% 		} //end for %>
		<% 	} //end if%>
		
		<% 	if (Builder.DaoMethodSetOption.ReloadOption.GenerateImpl) { %>
		<select id="<% =Builder.ReloadStmtId %>" parameterClass="<% =Builder.EntityName %>" resultMap="<% =Builder.FullResultMapId %>" extends="<% =Builder.SelectAllStmtId %>">
			WHERE <% 	for (int i = 0; i < Builder.PkColumns.Count; i++) { 
							ColumnInfo c = Builder.PkColumns[i]; 
				 			if (i > 0) { %>AND <% } %>(<% =c.SqlQualifiedColumnName %> = #<% =c.SqlInlineParameterMap %>#)
				<% 		} %>
		</select>
		<% 	} %>
	</statements>
</sqlMap>
