<%-- 
Name:	IBatisNetGen.DaoImpl.cst
Version: 2007.02.08
Author: Yaojian  ( smrtk@hotmail.com )
Description: Generates the data access interface for IBatis.Net (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map and data class from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="CSBatisBuilder.cs" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Globalization" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption()
	{
		return FileSetOption.CreateDefaultDaoImplOption();
	}
</script>
/***************************************************************************************************************
 * 
 * 2012-2013 苏宁资产管理系统 版权所有  
 * 
 * 文件名：           <% =this.FileName %>
 * 
 * 描述：             
 * 
 * 作者：             徐静(13060319)
 * 
 * 版本：             1.0
 * 
 * 最后更新：         徐静(13060319)
 * 
 * 创建时间：         <%=DateTime.Now.ToString("yyyy/M/d HH:mm:ss tt", new CultureInfo("en-US"))%>
 * 
 * 最后更新时间：     <%=DateTime.Now.ToString("yyyy/M/d HH:mm:ss tt", new CultureInfo("en-US"))%>
 * 
 *****************************************************************************************************************/
<%--//==============================================================================
//	CAUTION: This file is generated by <% =CodeTemplateInfo.FileName %> at <% =CodeTemplateInfo.DateCreated %>
//				Any manual editing will be lost in re-generation.
//==============================================================================--%>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using IBatisNet.DataMapper;

<%	if (Builder.EntityNamespace != Builder.DaoImplNamespace) { %>
using <% =Builder.EntityNamespace %>;
<%	} %>
<%	if (Builder.DaoIntfNamespace != Builder.DaoImplNamespace) { %>
using <% =Builder.DaoIntfNamespace %>;
<%	} %>
<%	if (Builder.DaoImplOption.Usings != null) {
		foreach (String s in Builder.DaoImplOption.Usings) { %>
using <% =s %>;
<%		} %>
<%	} %>

namespace <% =Builder.DaoImplNamespace %>
{	
    /// <summary><c><% =Builder.DaoImplName %></c> is the implementation of <see cref="<% =Builder.DaoIntfName %>"/>.</summary>
    public <% =Builder.DaoImplPartialDecl %>class <% =Builder.DaoImplName %><% =Builder.DaoImplBaseDecl %>
	{
<%	//GetCount
	if (Builder.DaoMethodSetOption.GetCountOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.GetCountMethod %>"/></summary>
		public int <% =Builder.GetCountMethod %>()
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.GetCountStmtId %>";
			int result = <% =CSHelper.SqlMethodString(Builder, "QueryForObject",DaoImplOption)%><int>(stmtId, null);
			return result;
		}

<%	} %>
<%	//Find
	if (Builder.DaoMethodSetOption.SelectOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.SelectMethod %>"/></summary>
		public <% =Builder.EntityName %> <% =Builder.SelectMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>)
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.SelectStmtId %>";
			<% =Builder.EntityName %> result = null;
		<% if(Builder.PkColumns.Count < 2)
		{ %>
			result = <% =CSHelper.SqlMethodString(Builder, "QueryForObject",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, <% =Builder.GetClrParamNames(Builder.PkColumns) %>);
		<%}
		else
		{ %>
			Hashtable htArgs = new Hashtable();
			<%for (int i = 0; i < Builder.PkColumns.Count; i++) {%>
			htArgs.Add("<% =Builder.PkColumns[i].PropName %>", <% =Builder.PkColumns[i].ClrParamName %>);
			<%}%>
			result = <% =CSHelper.SqlMethodString(Builder, "QueryForObject",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, htArgs);
		<% } %>
			return result;
		}

<%	} //if %>
<%	//QuickFind
	if (Builder.HasLob && Builder.DaoMethodSetOption.SelectNonLobOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.SelectNonLobMethod %>"/></summary>
		public <% =Builder.EntityName %> <% =Builder.SelectNonLobMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>)
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.SelectNonLobStmtId %>";
			<% =Builder.EntityName %> result = null;
		<% if(Builder.PkColumns.Count < 2)
		{ %>
			result = <% =CSHelper.SqlMethodString(Builder, "QueryForObject",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, <% =Builder.GetClrParamNames(Builder.PkColumns) %>);
		<%
		}
		else
		{ %>
			Hashtable htArgs = new Hashtable();
			<%for (int i = 0; i < Builder.PkColumns.Count; i++)
			{%>
			htArgs.Add("<% =Builder.PkColumns[i].PropName %>", <% =Builder.PkColumns[i].ClrParamName %>);
			<%}%>
			result = <% =CSHelper.SqlMethodString(Builder, "QueryForObject",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, htArgs);
		<% } %>
			return result;
		}
		
<%	} //if %>
<%	//FindAll
	if (Builder.DaoMethodSetOption.SelectAllOption.GenerateIntf)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.SelectAllMethod %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.SelectAllMethod %>()
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.SelectAllStmtId %>";
			IList<<% =Builder.EntityName %>> result = <% =CSHelper.SqlMethodString(Builder, "QueryForList",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, null);
			return result;
		}
		
<%	} //if %>
<%	//QuickFindAll
	if (Builder.DaoMethodSetOption.SelectNonLobAllOption.GenerateIntf)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.SelectNonLobAllMethod %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.SelectNonLobAllMethod %>()
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.SelectNonLobAllStmtId %>";
			IList<<% =Builder.EntityName %>> result = <% =CSHelper.SqlMethodString(Builder, "QueryForList",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, null);
			return result;
		}
		
<%	} //if %>
<%	//FindBy, QuickFindBy
	foreach (ColumnInfo c in Builder.FinderColumns)
	{ 
		//FindBy
		if (Builder.DaoMethodSetOption.SelectByOption.GenerateImpl)
		{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.SelectByMethod(c) %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.SelectByMethod(c) %>(<% =c.ClrParamDecl %>)
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.SelectByStmtId(c) %>";
			IList<<% =Builder.EntityName %>> result = <% =CSHelper.SqlMethodString(Builder, "QueryForList",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, <% =c.ClrParamName %>);
			return result;
		}
		
<%		} //if	%>
<%		//QuickFindBy
		if (Builder.HasLob && Builder.DaoMethodSetOption.SelectNonLobByOption.GenerateImpl)
		{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.SelectNonLobByMethod(c) %>"/></summary>
		public IList<<% =Builder.EntityName %>> <% =Builder.SelectNonLobByMethod(c) %>(<% =c.ClrParamDecl %>)
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.SelectNonLobByStmtId(c) %>";
			IList<<% =Builder.EntityName %>> result = <% =CSHelper.SqlMethodString(Builder, "QueryForList",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, <% =c.ClrParamName %>);
			return result;
		}
		
<%		} //if	
	} //foreach %>
<%	//Insert
	if (Builder.DaoMethodSetOption.InsertOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.InsertMethod %>"/></summary>
		public void <% =Builder.InsertMethod %>(<% =Builder.EntityName %> obj)
		{
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.InsertStmtId %>";
			<% =CSHelper.SqlMethodString(Builder, "Insert",DaoImplOption)%>(stmtId, obj);
		}
		
<%	} //if %>
<%	//Update
	if (Builder.DaoMethodSetOption.UpdateOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.UpdateMethod %>"/></summary>
		public void <% =Builder.UpdateMethod %>(<% =Builder.EntityName %> obj)
		{
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.UpdateStmtId %>";
			<% =CSHelper.SqlMethodString(Builder, "Update",DaoImplOption)%>(stmtId, obj);
		}
		
<%	} //if %>
<%	//Delete
	if (Builder.DaoMethodSetOption.DeleteOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.DeleteMethod %>"/></summary>
		public void <% =Builder.DeleteMethod %>(<% =Builder.EntityName %> obj)
		{
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.DeleteStmtId %>";
			<% =CSHelper.SqlMethodString(Builder, "Delete",DaoImplOption)%>(stmtId, obj);
		}
		
<%	} //if %>
<%  //DeleteBy
	if (Builder.DaoMethodSetOption.DeleteByOption.GenerateImpl)
	{ %>
<%		foreach (ColumnInfo c in Builder.FinderColumns)
{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.DeleteByMethod(c) %>"/></summary>
		public int <% =Builder.DeleteByMethod(c) %>(<% =c.ClrParamDecl %>)
		{
			String stmtId = "<% =Builder.BatisNamespace %>.<% =Builder.DeleteByStmtId(c) %>";
			int result = <% =CSHelper.SqlMethodString(Builder, "Delete",DaoImplOption)%>(stmtId, <% =c.ClrParamName %>);
			return result;
		}
		
<%		} //foreach %>
<%	} //if %>
<%	//Reload
	if (Builder.DaoMethodSetOption.ReloadOption.GenerateImpl)
	{ %>
		/// <summary>Implements <see cref="<% =Builder.DaoIntfName %>.<% =Builder.ReloadMethod %>"/></summary>
		public void <% =Builder.ReloadMethod %>(<% =Builder.EntityName %> obj)
		{
			if (obj == null) throw new ArgumentNullException("obj");
			String stmtId = "<% =Builder.BatisNamespace%>.<% =Builder.SelectStmtId %>";
			<% =CSHelper.SqlMethodString(Builder, "QueryForObject",DaoImplOption)%><<% =Builder.EntityName %>>(stmtId, obj, obj);
		}
		
<%	} //if %>
	}

}
