<%-- 
Name:	IBatisNetGen.DaoIntf.cst
Version: 2007.02.08
Author: Yaojian  ( smrtk@hotmail.com )
Description: Generates the data access interface for IBatis.Net (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map and data class from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="CSBatisBuilder.cs" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Globalization" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption() {
		return FileSetOption.CreateDefaultDaoIntfOption();
	}
</script>
/***************************************************************************************************************
 * 
 * 2012-2013 苏宁资产管理系统 版权所有  
 * 
 * 文件名：           <% =this.FileName %>
 * 
 * 描述：             
 * 
 * 作者：             徐静(13060319)
 * 
 * 版本：             1.0
 * 
 * 最后更新：         徐静(13060319)
 * 
 * 创建时间：         <%=DateTime.Now.ToString("yyyy/M/d HH:mm:ss tt", new CultureInfo("en-US"))%>
 * 
 * 最后更新时间：     <%=DateTime.Now.ToString("yyyy/M/d HH:mm:ss tt", new CultureInfo("en-US"))%>
 * 
 *****************************************************************************************************************/
<%--//==============================================================================
//	CAUTION: This file is generated by <% =CodeTemplateInfo.FileName %> at <% =CodeTemplateInfo.DateCreated %>
//				Any manual editing will be lost in re-generation.
//==============================================================================--%>
using System;
using System.Collections.Generic;
using System.Text;

<%	if (Builder.DaoIntfOption.Usings != null) {
		foreach (String s in Builder.DaoIntfOption.Usings) { %>
using <% =s %>;
<%		} %>
<%	} %>
<%	if (Builder.EntityNamespace != Builder.DaoIntfNamespace) { %>
using <% =Builder.EntityNamespace %>;
<%	} %>

namespace <% =Builder.DaoIntfNamespace %>
{	
    /// <summary><c><% =Builder.DaoIntfName %></c> is the DAO interface for <see cref="<% =Builder.EntityQualifiedName %>"/>.</summary>
    public <% =Builder.DaoIntfPartialDecl %>interface <% =Builder.DaoIntfName %><% =Builder.DaoIntfBaseDecl %>
	{
<%	//GetCount
	if (Builder.DaoMethodSetOption.GetCountOption.GenerateIntf)
	{ %>
		/// <summary>Returns the total count of objects.</summary>
		int <% =Builder.GetCountMethod %>();

<%	} %>
<%	//Find
	if (Builder.DaoMethodSetOption.SelectOption.GenerateIntf)
	{ %>
		/// <summary>Finds a <see cref="<% =Builder.EntityName %>"/> instance by the primary key value.</summary>
		<% =Builder.EntityName %> <% =Builder.SelectMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>);

<%	} //if %>
<%	//QuickFind
	if (Builder.HasLob && Builder.DaoMethodSetOption.SelectNonLobOption.GenerateIntf)
	{ %>
		/// <summary>Finds a <see cref="<% =Builder.EntityName %>"/> instance by the primary key value without Lob columns loaded.</summary>
		<% =Builder.EntityName %> <% =Builder.SelectNonLobMethod %>(<% =Builder.GetClrParamsDecl(Builder.PkColumns) %>);
		
<%	} //if %>
<%	//FindAll
	if (Builder.DaoMethodSetOption.SelectAllOption.GenerateIntf) { %>
		/// <summary>Finds all <% =Builder.EntityName %> instances.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.SelectAllMethod %>();
		
<%	} //if %>
<%	//QuickFindAll
	if (Builder.DaoMethodSetOption.SelectNonLobAllOption.GenerateIntf) { %>
		/// <summary>Finds all <% =Builder.EntityName %> instances without Lob columns loaded.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.SelectNonLobAllMethod %>();
		
<%	} //if %>
<%	//FindBy, FindByNonLob
	foreach (ColumnInfo c in Builder.FinderColumns)
	{ 
		//FindBy
		if (Builder.DaoMethodSetOption.SelectByOption.GenerateIntf)
		{ %>
		/// <summary>Finds <% =Builder.EntityName %> instances by <% =c.PropName %> value.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.SelectByMethod(c) %>(<% =c.ClrParamDecl %>);
		
<%		} //if	%>
<%		//QuickFindBy
		if (Builder.HasLob && Builder.DaoMethodSetOption.SelectNonLobByOption.GenerateIntf)
		{ %>
		/// <summary>Finds <% =Builder.EntityName %> instances by <% =c.PropName %> value without Lob columns loaded.</summary>
		IList<<% =Builder.EntityName %>> <% =Builder.SelectNonLobByMethod(c) %>(<% =c.ClrParamDecl %>);
		
<%		} //if
	} //foreach %>
<%	//Insert
	if (Builder.DaoMethodSetOption.InsertOption.GenerateIntf)
	{ %>
		/// <summary>Inserts a new <% =Builder.EntityName %> instance into underlying database table.</summary>
		void <% =Builder.InsertMethod %>(<% =Builder.EntityName %> obj);
		
<%	} //if %>
<%	//Update
	if (Builder.DaoMethodSetOption.UpdateOption.GenerateIntf)
	{ %>
		/// <summary>Update the underlying database record of a <% =Builder.EntityName %> instance.</summary>
		void <% =Builder.UpdateMethod %>(<% =Builder.EntityName %> obj);
		
<%	} //if %>
<%	//Delete
	if (Builder.DaoMethodSetOption.DeleteOption.GenerateIntf)
	{ %>
		/// <summary>Delete the underlying database record of a <% =Builder.EntityName %> instance.</summary>
		void <% =Builder.DeleteMethod %>(<% =Builder.EntityName %> obj);
		
<%	} //if %>
<%  //DeleteBy
	if (Builder.DaoMethodSetOption.DeleteByOption.GenerateIntf)
	{ %>
<%		foreach (ColumnInfo c in Builder.FinderColumns)
{ %>
        /// <summary>Deletes <see cref="<% =Builder.EntityName %>"/> instances by <see cref="<% =Builder.EntityName + "." + c.PropName %>"/>.</summary>
		int <% =Builder.DeleteByMethod(c) %>(<% =c.ClrParamDecl %>);
		
<%		} //foreach %>
<%	} //if %>
<%	//Reload
	if (Builder.DaoMethodSetOption.ReloadOption.GenerateIntf)
	{ %>
		/// <summary>Reload the underlying database record of a <% =Builder.EntityName %> instance.</summary>
		void <% =Builder.ReloadMethod %>(<% =Builder.EntityName %> obj);
		
<%	} //if %>
	}

}
